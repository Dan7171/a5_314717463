project: collect_toys 			
  
 available_parameters_code:
__possibleParameters.push_back(std::make_tuple("blue"));
__possibleParameters.push_back(std::make_tuple("red"));
__possibleParameters.push_back(std::make_tuple("black"));
__possibleParameters.push_back(std::make_tuple("green"));

parameter: string chosenColorParam  

dynamic_model: 

 cout << "*Pick started." << endl
         <<"action cnt="
		 <<(state.action_cnt_dbg)
		 <<"pick_cnt="
         <<(state.pick_cnt)
         <<"nav_cnt="
         <<(state.nav_cnt)
		 <<"total rewards="
		 <<(state.episode_total_rewards_dbg)
		 << "real location = "
         << (state.agentLoc) << " / "
		 << "ball locations="
		 << (state.tBallObjects[0]->location)
         << (state.tBallObjects[1]->location)
         << (state.tBallObjects[2]->location)
         << (state.tBallObjects[3]->location)
		 << endl;
 cout << "Robot selected Picking:   "
		<<(chosenColorParam)
		 << endl; 
		 
//debug
state__.action_cnt_dbg = state.action_cnt_dbg + 1;
 
//pick logic

state__.pick_cnt++;
int successR = -1;
int failR = -2;
string chosenColor= chosenColorParam;
int currLoc = state.agentLoc;
string ballInCurrLoc = ""; 
bool successfulPick = false;
int nBalls = state.tBallObjects.size();
bool robotAtBaby = (currLoc == state.baby_loc_const);
int ithBallLoc = -1;
string ithBallColor = "";
	
if (!robotAtBaby){
	// check if carrying any ball
	bool carrying = false;
	for(int i=0; i < nBalls; i++){
		if(state.tBallObjects[i]->location == state.hand_loc_const){
			carrying = true;
			cout << "cannot perform pick! carrying a ball" << endl;
			break;
		}
	}
	
	// only if not carrying (can pick up) - check if chose the right color to pickup
	if (!carrying){
		for(int i=0; i < nBalls; i++){
			ithBallLoc = state.tBallObjects[i]->location;
			ithBallColor = state.tBallObjects[i]->color;
			
			if(currLoc == ithBallLoc && chosenColor == ithBallColor){
				// pick the ball
				state__.tBallObjects[i]->location = state.hand_loc_const; 
				successfulPick = true;
				cout << "picked ball!" << endl;
				break;
			}
		}
	}
}

else{
	 cout << "cannot perform pick! robot at baby location" << endl;
}
__moduleResponse = successfulPick  ? eSuccess : eFailed;
__reward = successfulPick ? successR : failR;
 state__.episode_total_rewards_dbg = state.episode_total_rewards_dbg + __reward;
