project: collect_toys
horizon: 20
discount: 0.9999 

define_type: tToy
variable: int location 
variable: float reward 
variable: string type 

define_type:  eLocation
enum_members: L0,L1,L2,L3,LChild, LArm

state_variable: tToy toy1
code:
state.toy1.type="green";

state_variable: tToy toy2
code:
state.toy2.type="blue";

state_variable: tToy toy3
code:
state.toy3.type="black";

state_variable: tToy toy4
code:
state.toy4.type="red";

state_variable: int pickActionsLeft 
code:
state.pickActionsLeft=6;

state_variable: int robotLocation 
code:
state.robotLocation=LChild;
 
reward_code:
 if(state.pickActionsLeft < 0)
{
	__isGoalState =true;
}

if(!std::any_of(state.tToyObjects.cbegin(), state.tToyObjects.cend(), [&](tToy* t){ return t->location != LChild; }))
{
	__isGoalState =true;
}


initial_belief:
//set locations values
vector<float> weightsLocationGreen{0.1,0.05,0.8,0.05};
state.toy1.location = AOSUtils::SampleDiscrete(weightsLocationGreen);

vector<float> weightsLocationBlue{0.7,0.1,0.1,0.1};
float selectedWeight = weightsLocationBlue[state.toy1.location];
for(int i=0;i<4;i++){weightsLocationBlue[i]+=selectedWeight/3;}
weightsLocationBlue[state.toy1.location]=0;
state.toy2.location = AOSUtils::SampleDiscrete(weightsLocationBlue);
        
vector<float> weightsLocationBlack{0.25,0.25,0.25,0.25};
selectedWeight = weightsLocationBlack[state.toy2.location]+weightsLocationBlack[state.toy1.location];
for(int i=0;i<4;i++){weightsLocationBlack[i]+=selectedWeight/2;}
weightsLocationBlack[state.toy1.location]=0;weightsLocationBlack[state.toy2.location]=0;
state.toy3.location = AOSUtils::SampleDiscrete(weightsLocationBlack);
        
vector<float> weightsLocationRed{1.0,1.0,1.0,1.0};
weightsLocationRed[state.toy1.location]=0;weightsLocationRed[state.toy2.location]=0;;weightsLocationRed[state.toy3.location]=0;
state.toy4.location = AOSUtils::SampleDiscrete(weightsLocationRed);
        
//set rewards values
vector<float> rewards{40,20,10,10};
vector<float> weightsRewardsGreen{0.8,0.05,0.1,0.05};
int selectedRewardIndex1 = AOSUtils::SampleDiscrete(weightsRewardsGreen);
state.toy1.reward = rewards[selectedRewardIndex1];
        
vector<float> weightsRewardsBlue{0.1,0.7,0.1,0.1};
selectedWeight = weightsRewardsBlue[selectedRewardIndex1];
for(int i=0;i<4;i++){weightsRewardsBlue[i]+=selectedWeight/3;}
weightsRewardsBlue[selectedRewardIndex1]=0;
int selectedRewardIndex2 = AOSUtils::SampleDiscrete(weightsRewardsBlue);
state.toy2.reward = rewards[selectedRewardIndex2];
        
vector<float> weightsRewardsBlack{0.25,0.25,0.25,0.25};
selectedWeight = weightsRewardsBlack[selectedRewardIndex1] + weightsRewardsBlack[selectedRewardIndex2];
for(int i=0;i<4;i++){weightsRewardsBlack[i]+=selectedWeight/2;}
weightsRewardsBlack[selectedRewardIndex1]=0;weightsRewardsBlack[selectedRewardIndex2]=0;
int selectedRewardIndex3 = AOSUtils::SampleDiscrete(weightsRewardsBlack);
state.toy3.reward = rewards[selectedRewardIndex3];
        
vector<float> weightsRewardsRed{1.0,1.0,1.0,1.0};
weightsRewardsRed[selectedRewardIndex1]=0;weightsRewardsRed[selectedRewardIndex2]=0;;weightsRewardsRed[selectedRewardIndex3]=0;
state.toy4.reward = rewards[AOSUtils::SampleDiscrete(weightsRewardsRed)];


